{"version":3,"sources":["components/Cards/index.js","components/Wrapper/index.js","components/Nav/index.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","selectedCard","id","alt","name","src","image","Wrapper","children","Nav","href","currentScore","highScore","enableDebuggingMode","App","state","currentCards","clickedCards","generateCards","console","log","cards","cardsList","map","singleCard","i","Cards","concat","key","_this","setState","includes","endGame","incrementScores","newClicked","Object","toConsumableArray","length","shuffleCards","currentHighScore","newIncrement","tempCards","j","Math","floor","random","_ref","prompt","displayCards","this","Fragment","components_Nav","components_Wrapper","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e143456b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <span className=\"\" onClick={() => {\r\n        props.selectedCard(props.id);\r\n      }}>\r\n        <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image ? props.image : \"none\"} className = {props.image ? \"img\" : \"fa fa-spinner fa-spin\"}/>\r\n        </div>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n/**\r\n * \r\n * @param {Component} props : a list of card components \r\n * \r\n * Function inserts all cards into a div with class \"wrapper\"\r\n */\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"/\">Memory Card Clicker</a>\r\n      <span className=\"moveRight\">Points: {props.currentScore} | High Score: {props.highScore} </span>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport Card from \"./components/Cards\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport cardsList from \"./data.json\";\r\nimport \"./App.css\";\r\nimport Nav from \"./components/Nav\";\r\n\r\n//Global variable to enable all logs available.\r\n//If false, keep it false (react requirement for assignment)\r\nvar enableDebuggingMode = false; \r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    currentScore: 0,\r\n    highScore: 0,\r\n    currentCards: [],\r\n    clickedCards: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.generateCards();\r\n  };\r\n\r\n  /*\r\n    Render a list of cards from data.json \r\n\r\n    @ id: Used to track specific cards in state\r\n    @ key: Used to order cards in react/browser\r\n    @ * : All else are card data properties\r\n  */\r\n  generateCards = () => {\r\n    enableDebuggingMode ? console.log(\"Generating Cards\") : enableDebuggingMode = false;\r\n    \r\n    let cards =  cardsList.map((singleCard, i) => {\r\n      return <Card\r\n        id={`SR-${i}`}\r\n        key={`Card-Unit-${i}`}\r\n        name={singleCard.name}\r\n        image={singleCard.image}\r\n        selectedCard={this.selectedCard}\r\n      />\r\n    })\r\n\r\n    this.setState({currentCards: cards});\r\n  };\r\n\r\n  selectedCard = (id) => {\r\n    enableDebuggingMode ? console.log(\"Selecting Card: \", this.state.clickedCards) : enableDebuggingMode = false;\r\n    \r\n    \r\n    if (this.state.clickedCards.includes(id)) this.endGame(\"You Lost!\")\r\n    else {\r\n      this.incrementScores();\r\n\r\n      //Increment score if user clicks correctly, else run the end game function displaying a loss.\r\n      let newClicked = [...this.state.clickedCards, id];\r\n      this.setState({clickedCards: newClicked});\r\n\r\n      enableDebuggingMode ? console.log(\"Selected Card: \", this.state.clickedCards) : enableDebuggingMode = false;\r\n  \r\n      //When the user reaches all one-time-clicked cards, run the end game function displaying a win, else shuffle for the next click.\r\n      if (this.state.currentCards.length === this.state.clickedCards.length) this.endGame(\"You Win!\")\r\n      else this.shuffleCards();\r\n    }\r\n  };\r\n\r\n  incrementScores = () => {\r\n    enableDebuggingMode ? console.log(`Incrementing Current: ${this.state.currentScore} HighScore: ${this.state.highScore}`) : enableDebuggingMode = false;\r\n    let currentHighScore = this.state.highScore;\r\n    let newIncrement = this.state.currentScore + 1; //do a (+1) not a (++)\r\n    this.setState({currentScore: newIncrement});\r\n\r\n    //If the current score gets higher than the high score, update high score to current score\r\n    if (newIncrement > currentHighScore) this.setState({highScore: newIncrement});\r\n    enableDebuggingMode ? console.log(`Incremented Current: ${this.state.currentScore} HighScore: ${this.state.highScore}`) : enableDebuggingMode = false;\r\n  }\r\n  \r\n  shuffleCards = () => {\r\n    var tempCards = this.state.currentCards\r\n    /**\r\n     * Randomize array element order in-place.\r\n     * Using Durstenfeld shuffle algorithm.\r\n    */\r\n    for (let i = tempCards.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [tempCards[i], tempCards[j]] = [tempCards[j], tempCards[i]];\r\n    }\r\n\r\n    this.setState({currentCards: tempCards})\r\n  };\r\n\r\n  endGame = (prompt) => {\r\n    enableDebuggingMode ? console.log(`Ending Game, Current: ${this.state.currentScore} HighScore: ${this.state.highScore} Cards: `, this.state.currentCards) : enableDebuggingMode = false;    \r\n    this.setState({currentCards: [<h2>{prompt}</h2>, <br /> , <a onClick={() => this.generateCards()}>Click Here to Play Again!</a>], currentScore: 0, clickedCards: []});\r\n    enableDebuggingMode ? console.log(`Ending Game, Current: ${this.state.currentScore} HighScore: ${this.state.highScore} Cards: `, this.state.currentCards) : enableDebuggingMode = false;\r\n    \r\n  }\r\n\r\n  displayCards = () => {\r\n    return this.state.currentCards\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Nav currentScore={this.state.currentScore} highScore={this.state.highScore}/>\r\n        <Wrapper>\r\n          { this.displayCards() }\r\n        </Wrapper>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}